/*
01 

Apenas olhando o c√≥digo abaixo (sem escrever c√≥digo), voc√™ sabe qual valor 
cada let est√° armazenando ap√≥s a execu√ß√£o do forEach?

Apenas pense em qual valor cada let armazenou. Voc√™ pode escrever um coment√°rio 
tempor√°rio para ajudar a entender o fluxo. 

S√≥ ap√≥s concluir o racioc√≠nio sobre os valores das lets, confira se os valores 
que voc√™ sup√¥s est√£o corretos. Voc√™ pode usar console.log para visualizar os 
valores (ap√≥s concluir seu racioc√≠nio). 

O principal objetivo deste exerc√≠cio √© checar se voc√™ entendeu o fluxo de 
execu√ß√µes da fun√ß√£o do forEach.
*/

const fruits = ['ma√ß√£', 'banana', 'laranja']

let firstLet = 0
let secondLet = 3
let thirdLet = ''

// 1 - 1 = 0
// 0 === 0 ent√£o thirdLet = fruit
// 0 = 0 + 0
// 3 = 3 * 0

fruits.forEach((fruit, index, array) => {
  const lastIndex = array.length - 1

  if (index === lastIndex) {
    thirdLet = fruit
  }
  
  firstLet = firstLet + lastIndex
  secondLet = secondLet * index
})

/*
02

Converta o for loop abaixo em um forEach.

O seu forEach deve ter a mesma funcionalidade do for. Isto √©, ele deve 
preencher o array lettersInUppercase com a vers√£o mai√∫scula das letras. 

Deve ficar assim: ['V', 'E', 'P']

Ap√≥s converter, verifique se lettersInUppercase realmente est√° armazenando 
o valor que voc√™ deseja.
*/

 const letters = ['v', 'e', 'p']
 const lettersInUppercase = []

for (let i = 0; i < letters.length; i++) {
 lettersInUppercase.push(letters[i].toUpperCase())
 }


/*
03

Declare um forEach logo abaixo da let paragraphs e acima da linha do 
section.innerHTML.

Ap√≥s a execu√ß√£o do seu forEach, a let paragraphs deve conter uma string com 
a marca√ß√£o HTML de 4 par√°grafos (<p>). 

Cada par√°grafo deve conter uma string do array reviews. 

Deve ficar assim: 
'<p>Eu sempre...</p><p>O primeiro...</p><p>Michael √©...</p><p>Recomendo...</p>'

üëÜüèª as retic√™ncias (...) acima s√£o apenas uma representa√ß√£o do restante 
do par√°grafo.
*/

const section = document.querySelector('[data-js="section"]')

const reviews = [
  'Eu sempre adorei o filme e quando descobri que tinha o livro tamb√©m fiquei doido. Demorei um pouco mas acabei comprando e finalmente li \o/.',
  'O primeiro filme foi baseado nesse livro, por√©m o livro (como sempre) √© muito mais completo, com mais personagens, mais acontecimentos e at√© mesmo mais dinossauros. Na verdade nesse livro tem coisas do segundo e terceiro filme tamb√©m, eles mudaram bastante nos filmes, acho que pra ficar mais comercial, e se o filme √© bom, o livro √© 100 vezes melhor.',
  'Michael √© um √≥timo autor, esse sim pesquisa muito antes de escrever um livro, al√©m da hist√≥ria que j√° prende sua aten√ß√£o, ele fala bastante de gen√©tica (pra explicar como os dinossauros foram criados) e acaba falando um pouco de programa√ß√£o (inform√°tica), por causa dos programas avan√ßados e modernos que o parque tinha. E isso foi uma das coisas que eu achei muito legal, ele explica as coisas com gr√°ficos, tabelas, c√≥digos ... enfim, o cara √© foda hahaha.',
  'Recomendo esse livro pra quem curte uma boa hist√≥ria de fic√ß√£o. Apesar de muita gente pensar que o livro n√£o tem gra√ßa, porque o legal mesmo √© ver o dinossauro no filme, com todos os efeitos especiais, eu digo pra deixar esse pensamento de lado, pois a hist√≥ria √© t√£o bem contada e os detalhes s√£o t√£o bem relatados, que voc√™ passa a fazer parte da hist√≥ria, e vive todas as emo√ß√µes hahaha.'
]

let paragraphs = ''

// substitua este coment√°rio pelo seu forEach

section.innerHTML = paragraphs

/*
04

Atrav√©s do c√≥digo abaixo, gere uma string no seguinte formato:
  
Segundo o site Metacritic, as 5 melhores s√©ries j√° feitas s√£o:
- Rectify, com metascore em 99 e user score em 8.2.
- The Larry Sanders Show, com metascore em 99 e user score em 4.8.
- Murder One, com metascore em 99 e user score em 4.6.
- Breaking Bad, com metascore em 99 e user score em 9.7.
- The Office (UK), com metascore em 98 e user score em 8.4.

Aten√ß√£o! A string deve estar no exato formato acima. Isto √©, ela precisa 
ser apenas uma √∫nica string com o conte√∫do textual acima. 

Dica: para quebrar linha, voc√™ pode usar dentro da string o caractere 
especial \n. Pesquise por ele, se necess√°rio. 
*/

const bestTVShows = [
  { title: 'Rectify', metascore: 99, userScore: 8.2 },
  { title: 'The Larry Sanders Show', metascore: 99, userScore: 4.8 },
  { title: 'Murder One', metascore: 99, userScore: 4.6 },
  { title: 'Breaking Bad', metascore: 99, userScore: 9.7 },
  { title: 'The Office (UK)', metascore: 98, userScore: 8.4 }
]

let message = 'Segundo o site Metacritic, as 5 melhores s√©ries j√° feitas s√£o:'

/*
05

Na const nameAsArray, insira manualmente seu primeiro nome na string vazia 
antes da invoca√ß√£o do m√©todo split. 

Se, por exemplo, o nome √© Jo√£o, deve ficar assim: 'Jo√£o'.split('').

Abaixo da const nameAsArray, declare uma const messages e atribua a ela um 
array vazio.

Abaixo da const messages, adicione no array, quantas vezes forem necess√°rias, 
a seguinte string:

'- "X" √© a X¬™ letra do meu nome.'

üëÜüèª os "X" da string acima s√£o apenas representa√ß√µes da letra e da posi√ß√£o dela 
em seu nome.

Por exemplo, se o nome √© "Roger", as strings que o array messages deve conter 
s√£o:

[
  '- "R" √© a 1¬™ letra do meu nome.',
  '- "o" √© a 2¬™ letra do meu nome.',
  ... e assim por diante, at√© a √∫ltima letra do nome.
]

Ap√≥s terminar de adicionar todas as strings no array messages, na linha 
seguinte, apenas para car√°ter de visualiza√ß√£o, exiba no console cada string 
do array.
*/

const nameAsArray = ''.split('')

/*
06

Abaixo do array customers, declare uma const priceMessages e atribua um array 
vazio a ela.

Abaixo do array vazio que voc√™ acabou de criar, voc√™ precisa adicionar nesse 
array mensagens que devem conter o nome do cliente e o total que ele deve 
pagar.

O array priceMessages deve ficar assim: 
['Ricardo deve pagar R$ 119.80', 'Giselle deve pagar R$ 319.70']

Para formatar com duas casas decimais o pre√ßo total que cada cliente deve 
pagar, voc√™ pode usar o m√©todo toFixed(2).
*/

const customers = [
  {
    name: 'Ricardo',
    age: 25,
    orders: [
      { id: 59, product: 'Camiseta Comfort Em Algod√£o Com Estampa Route 66', price: 29.9 },
      { id: 129, product: 'Cal√ßa Skinny Em Sarja Com Bolsos', price: 89.9 }
    ]
  },
  {
    name: 'Giselle',
    age: 37,
    orders: [
      { id: 85, product: 'Bota Cano M√©dio Tratorada', price: 99.9 },
      { id: 645, product: 'Bolsa Transversal Com Al√ßa De Corrente', price: 59.9 },
      { id: 491, product: 'Pijama Americano Curto Em Viscolycra Com Vi√©s Contrastante', price: 159.90 }
    ]
  }
]

/*
07

Neste exerc√≠cio, seu desafio ser√° criar, do zero, uma fun√ß√£o forEach que 
possua a mesma funcionalidade do m√©todo forEach original. 

Sua fun√ß√£o n√£o deve utilizar o m√©todo forEach original. 

A invoca√ß√£o da sua fun√ß√£o forEach deve receber um array como 1¬∫ argumento 
e a declara√ß√£o de uma fun√ß√£o como 2¬∫ argumento. 

Para testar a sua fun√ß√£o forEach, adicione as strings abaixo no array que 
a const loopMessages armazena. 

Ao final da execu√ß√£o da sua fun√ß√£o forEach, o array loopMessages deve 
ficar assim:

[
  '1 √© o 1¬∫ item do array [1, 2, 3]',
  '2 √© o 2¬∫ item do array [1, 2, 3]',
  '3 √© o 3¬∫ item do array [1, 2, 3]'
]
*/

const loopMessages = []